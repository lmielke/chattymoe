# markddown_to_python.py
import os
import re
from datetime import datetime as dt
"""
takes a markdown file containing python documentation and converts it
    to a python file with the same name and a .py extension.
    """

def load_file(filePath, *args, **kwargs):
    """ 
    load a file and return its contents as a string
    """
    with open(filePath, "r") as f:
        return f.read()


def make_file_names(filePath, pythonDir, *args, **kwargs):
    """
    takes the baseName of a filePath to a .md file and changes the file extension to .py
    returns the full filePath to the .md file and the full filePath to the .py file
    """
    if filePath.endswith(".md"):
        mdFilePath = filePath
        pyFilePath = os.path.join(pythonDir, os.path.basename(filePath).replace(".md", ".py"))
    elif filePath.endswith(".py"):
        pyFilePath = filePath
        mdFilePath = os.path.join(pythonDir, os.path.basename(filePath).replace(".py", ".md"))
    return mdFilePath, pyFilePath

def convert_markdown_to_python(mdText, *args, **kwargs):
    """
    takes the text from a markdown file and modifies it, so it can be saved as a python file
    i.e. the python code sits inside tripple backticks which must be removed
    i.e. the markdown file contains regular paragraphs which must be commented out
    """
    codeBlockStart, codeBlockEnd, isCodeBlock = "```python", "```", False
    subs, replacer = [r'^[A-za-z0-9]'], "# <md>"
    lines = []
    for i, line in enumerate(mdText.split('\n')):
        if i == 0:
            line = line + f" Generated: {re.sub(r'([: .])', r'-' , str(dt.now()))}"
        if line.startswith(codeBlockStart):
            isCodeBlock = True
            line = replacer + line
        elif line.startswith(codeBlockEnd):
            isCodeBlock = False
            line = replacer + line
        if isCodeBlock:
            pass  
        else:
            if re.search(subs[0], line) and not line.startswith("#"):
                line = replacer + line
        lines.append(line)
    return '\n'.join(lines)

def convert_python_to_markdown(pyText, *args, **kwargs):
    """
    takes the text from a python file and modifies it, so it can be saved as a markdown file
    reverses the effect of convert_markdown_to_python function above
    NOTE: This function assumes, that the pyhton file was generated by the 
    convert_markdown_to_python function above or folows the same format conventions.
    """
    lines, replacer = [], "# <md>"
    for i, line in enumerate(pyText.split('\n')):
        if i == 0:
            line, _ = line.split(" Generated:")
        if line.startswith(replacer):
            line = line.replace(replacer, "")
        lines.append(line)
    return '\n'.join(lines)


def save_to_file(filePath, fileContent, *args, **kwargs):
    """ 
    save a string to a file
    """
    with open(filePath, "w") as f:
        f.write(fileContent)